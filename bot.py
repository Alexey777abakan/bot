import logging
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    MenuButtonCommands, BotCommand
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(os.getenv("LOG_FILE", "bot.log")),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@sozvezdie_skidok")  # –ü—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
CHANNEL_NAME = os.getenv("CHANNEL_NAME", "–°–æ–∑–≤–µ–∑–¥–∏–µ —Å–∫–∏–¥–æ–∫")  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ Render
PORT = int(os.getenv("PORT", 5000))  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    welcome = State()
    menu = State()
    phone = State()
    broadcast = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_welcome_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã"), KeyboardButton(text="üí∞ –ó–∞–π–º-–ú–∞—Å—Ç–µ—Ä")],
            [KeyboardButton(text="üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä")],
            [KeyboardButton(text="üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥"), KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def subscribe_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_NAME}", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])

def create_credit_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="credit_cards")],
        [InlineKeyboardButton(text="–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/956606fa-02c7-4389-9069-943c0ab8c02b")],
        [InlineKeyboardButton(text="–°–±–µ—Ä–ë–∞–Ω–∫ - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –°–±–µ—Ä–ö–∞—Ä—Ç–∞", url="https://trk.ppdu.ru/click/3RujX0b6?erid=2SDnjcVm7Md")],
        [InlineKeyboardButton(text="–¢-–ë–∞–Ω–∫ - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ü–ª–∞—Ç–∏–Ω—É–º", url="https://trk.ppdu.ru/click/1McwYwsf?erid=2SDnjcyz7NY")],
        [InlineKeyboardButton(text="–£—Ä–∞–ª—Å–∏–± - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –∫–µ—à–±—ç–∫–æ–º", url="https://trk.ppdu.ru/click/bhA4OaNe?erid=2SDnje5iw3n")],
        [InlineKeyboardButton(text="–¢-–ë–∞–Ω–∫ ‚Äî –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ü–ª–∞—Ç–∏–Ω—É–º// –ö–µ—à–±—ç–∫ 2 000 —Ä—É–±–ª–µ–π", url="https://trk.ppdu.ru/click/QYJQHNtB?erid=2SDnjdSG9a1")],
        [InlineKeyboardButton(text="–°–æ–≤–∫–æ–º–±–∞–Ω–∫ - –ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –•–∞–ª–≤–∞ –ú–ò–†", url="https://trk.ppdu.ru/click/8lDSWnJn?erid=Kra23XHz1")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_loans_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–π–º-–ú–∞—Å—Ç–µ—Ä", url="https://ppdu.ru/8bfd124d-1628-4eb2-a238-531a4c629329")],
        [InlineKeyboardButton(text="MoneyMan", url="https://trk.ppdu.ru/click/iaxTaZ7u?erid=2SDnjd4NP9c")],
        [InlineKeyboardButton(text="Joymoney", url="https://trk.ppdu.ru/click/1Uf12FL6?erid=Kra23wZmP")],
        [InlineKeyboardButton(text="–¶–µ–ª–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã", url="https://trk.ppdu.ru/click/uqh4iG8P?erid=2SDnjeePynH")],
        [InlineKeyboardButton(text="–î–æ–±—Ä–æ–ó–∞–π–º", url="https://trk.ppdu.ru/click/VGWQ7lRU?erid=2SDnjdGSjHa")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_jobs_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/c8f23f85-45da-4804-a190-e6a358a9061b")],
        [InlineKeyboardButton(text="–ö—É—Ä—å–µ—Ä –≤ –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞/–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞", url="https://trk.ppdu.ru/click/80UG6A1L?erid=Kra23uVC3")],
        [InlineKeyboardButton(text="–ú–∞–≥–Ω–∏—Ç // –í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï", url="https://trk.ppdu.ru/click/kUTRwEqg?erid=2SDnjcR2t2N")],
        [InlineKeyboardButton(text="–ö—É—Ä—å–µ—Ä/–ü–æ–≤–∞—Ä-–∫–∞—Å—Å–∏—Ä –≤ Burger King", url="https://trk.ppdu.ru/click/UpMcqi2J?erid=2SDnjdu6ZqS")],
        [InlineKeyboardButton(text="–ê–ª—å—Ñ–∞ –±–∞–Ω–∫ // –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç", url="https://trk.ppdu.ru/click/Sg02KcAS?erid=2SDnjbsvvT3")],
        [InlineKeyboardButton(text="–¢-–ë–∞–Ω–∫ ‚Äî –†–∞–±–æ—Ç–∞ –≤ –¢-–ë–∞–Ω–∫–µ", url="https://trk.ppdu.ru/click/JdRx49qY?erid=2SDnjcbs16H")],
        [InlineKeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —É—Å–ª—É–≥ –ú–¢–°", url="https://trk.ppdu.ru/click/8Vv8AUVS?erid=2SDnjdhc8em")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_insurance_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–û—Å–∞–≥–æ", url="https://b2c.pampadu.ru/index.html#2341f23d-fced-49e1-8ecc-2184e809bf77")],
        [InlineKeyboardButton(text="–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–ø–æ—Ç–µ–∫–∏", url="https://ipoteka.pampadu.ru/index.html#c46f5bfd-5d57-41d8-889c-61b8b6860cad")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_treasure_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥: –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∂–¥–µ—Ç!", url="https://ppdu.ru/gifts/c94552a5-a5b6-4e65-b191-9b6bc36cd85b")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
MENU_OPTIONS = {
    "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã": create_credit_keyboard,
    "üí∞ –ó–∞–π–º-–ú–∞—Å—Ç–µ—Ä": create_loans_keyboard,
    "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä": create_jobs_keyboard,
    "üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ": create_insurance_keyboard,
    "üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥": create_treasure_keyboard
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                phone TEXT,
                first_interaction BOOLEAN DEFAULT FALSE
            )
        ''')
        await db.commit()

async def add_user(user_id, phone):
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        await db.execute('INSERT OR IGNORE INTO users (user_id, phone, first_interaction) VALUES (?, ?, ?)', (user_id, phone, True))
        await db.commit()

async def get_all_users():
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        async with db.execute('SELECT * FROM users') as cursor:
            rows = await cursor.fetchall()
            return rows

async def user_has_phone(user_id):
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        async with db.execute('SELECT phone FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row is not None and row[0] is not None

async def user_first_interaction(user_id):
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        async with db.execute('SELECT first_interaction FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row is not None and row[0]

async def set_first_interaction(user_id):
    async with aiosqlite.connect(os.getenv("DATABASE_URL", "users.db")) as db:
        await db.execute('UPDATE users SET first_interaction = TRUE WHERE user_id = ?', (user_id,))
        await db.commit()

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
async def log_user_action(user_id: int, action: str):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é
async def set_main_menu(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="/menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ]

    try:
        await bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

    try:
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        logger.info("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ–Ω—é: {e}")

async def on_startup(bot: Bot):
    await set_main_menu(bot)
    await bot.set_webhook(f"{WEBHOOK_URL}{WEBHOOK_PATH}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await log_user_action(user_id, "–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    first_interaction = await user_first_interaction(user_id)

    if first_interaction:
        if await user_has_phone(user_id):
            await state.set_state(Form.menu)
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üéâ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=create_menu_keyboard()
            )
        else:
            await state.set_state(Form.welcome)
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
                "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º\n"
                "üõ°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É\n"
                "üíº –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                reply_markup=create_welcome_keyboard()
            )
    else:
        await state.set_state(Form.welcome)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
            "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º\n"
            "üõ°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É\n"
            "üíº –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=create_welcome_keyboard()
        )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await log_user_action(message.from_user.id, "–∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    help_text = """
    üìö **–ü–æ–º–æ—â—å**

    - **/start**: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    - **/menu**: –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, "–æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é")
    await state.set_state(Form.menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=create_menu_keyboard())

@dp.message(StateFilter(Form.welcome), lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def process_welcome_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await log_user_action(user_id, "–Ω–∞–∂–∞–ª '–ù–∞—á–∞—Ç—å'")
    await set_first_interaction(user_id)
    
    if await user_has_phone(user_id):
        await state.set_state(Form.menu)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=create_menu_keyboard())
    else:
        await state.set_state(Form.phone)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True
        ))

@dp.message(StateFilter(Form.welcome), lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def process_welcome_help(message: types.Message):
    await log_user_action(message.from_user.id, "–∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    help_text = """
    üìö **–ü–æ–º–æ—â—å**

    - **/start**: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    - **/menu**: –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(StateFilter(Form.menu))
async def process_menu_selection(message: types.Message, state: FSMContext):
    option = message.text
    if option in MENU_OPTIONS:
        await log_user_action(message.from_user.id, f"–≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª: {option}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)
            if chat_member.status in ["member", "administrator", "creator"]:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã
                keyboard = MENU_OPTIONS[option]()
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                await message.answer(
                    f"‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞Oops! DeepSeek is experiencing high traffic at the moment. Please check back in a little while.Oops! DeepSeek is experiencing high traffic at the moment. Please check back in a little while.